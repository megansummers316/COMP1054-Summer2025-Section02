/* import Google fonts */
@import url('https://fonts.googleapis.com/css2?family=Climate+Crisis&family=Lato:wght@300&display=swap');

/* General Styles & Resets */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    width: 90%;
    max-width: 900px;
    margin: 2em auto;
}

.container>div {
    border-radius: 5px;
    padding: 10px;
    background-color: #57C4E5;
    border: 2px solid #D1D646;
}

.ex1,
.ex2 {
    padding-bottom: 2em;
    border-bottom: 2px solid #333;
}

p {
    margin-bottom: 1em;
}

.ex2 {
    margin-top: 2em;
}

.ex2 header {
    background-color: #F19143
}

.ex2 aside {
    background-color: #F55536;
}

.ex2 main {
    background-color: #FFB238
}

.ex2 footer {
    background-color: #FABC3C;
}


.ex3 div div:nth-of-type(1) {
    background-color: #29335C;
}

.ex3 div div:nth-of-type(2) {
    background-color: #F3A712;
}

.ex3 div div:nth-of-type(3) {
    background-color: #E4572E;
}

.ex3 div div:nth-of-type(4) {
    background-color: #A8C686;
}

.imgcontainer {
  max-width: 40vw; 
  margin: 0 auto; 
}

.imgcontainer img {
    max-width: 100%; 
}

/* Typography */

html {
    font-size: 10px;
}

body {
    font-size: 1.8rem;
    line-height: 1.8;
    font-family:sans-serif;

}

h1 {
    font-family: 'Climate Crisis', cursive;
    letter-spacing: 0.5rem;
    padding-top: 1em;
}

h1 {
    font-size: 4rem;
    margin-bottom: 0.5em;
    padding-bottom: 0.5em;
}

h2 {
    font-size: 3rem;
    padding-bottom: 0.5em;
}

p {
    padding: 1em; 
}

/* GRID STUFF STARTS HERE 
    everything above this is just colouring to make things easier to understand */


/************* Example One - Defining Your Grid ****************/

/* first example
.ex1 .container {
    display: grid;
    grid-template-rows: 100px 100px; -> must tell it height of each row
    grid-template-rows: repeat(2, 100px); -> means the same thing but allows for no repetition in the code 
    grid-template-columns: 400px 200px 100px;
    -> this makes a 2 rows by 3 columns grid with those specified sizes
        rows deals with height, columns deals with width
} */
.ex1 .container {
    display: grid;
    /* grid-template-columns: 1fr 1fr 1fr; -> this fills the whole grid space but divides it by however many fractions you have designated for it */
    gap: 20px;
    grid-auto-rows: minmax(100px, auto);
    grid-template-columns: repeat(auto-fill, minmax(200px, auto)); /* this is saying put as many columns as you can fit inside specified space and using the minmax allows for sizability */
}

/*********** Example 2 - Placing Items on the Grid  **************************/

.ex2 .container {
    display: grid;
    grid-template-columns: 3fr, 1fr;
}
.ex2 header {
    /* grid-column-start: 1;
    grid-column-end: 3; */
    grid-column: 1/3; /* shorthand for the two lines of code above */
    grid-row: 1/2; /* not necessary as browser did it for us but good to know */
}
.ex2 main {
    grid-column: 1/2; /* horizontal */
    grid-row: 2/3; /* vertical */
}
.ex2 aside {
    grid-column: 2/3; /* horizontal */
    grid-row: 2/3; /* vertical */
}
.ex2 footer {
    grid-column: 1/3; /* horizontal */
    grid-row: 3/4; /* vertical */
}

/*********** Example 3 - Alignment with CSS Grid **************************/

/* Try It - Recreate the layout shown by placing the items on the grid */

.blueBox {
    grid-area: blueBox;
    /* pseudo-class selector
        .ex3 div div:nth-of-type(1) */
    align-self: center; /* vertical */
    justify-self: center; /* horizontal */
}
.yellowBox {
    grid-area: yellowBox;
}
.redBox {
    grid-area: redBox;
}
.greenBox {
    grid-area: greenBox;
}
.ex3 .container {
    display: grid;
    grid-template-columns: repeat(3, 200px);
    grid-template-rows: repeat(2, 200px);
    height: 500px;
    width: 850px;
    gap: 0.25em;
    grid-template-areas: 
        "blueBox blueBox greenBox"
        "yellowBox redBox greenBox";
}

/********** Example 4 - Subgrid  ************************/
/* allows child grid to take over the grids and gaps of the parent grid */

/* setting up colours and padding */
.ex4 .subgrid > div {
    background: #4caf50; 
    color: #fff; 
    padding: 10px; 
    text-align: center; 
}
.ex4 .normal-grid > div {
    background: #f44336; 
    color: #fff; 
    padding: 10px; 
    text-align: center; 
}

/* alters both misaligned and aligned grid */
.ex4 .parent-grid {
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    gap: 10px;
    background-color: #F3A712;
    margin-bottom: 40px;
    padding: 10px;
}
.parent-grid .header {
    text-align: center;
}
.ex4 .nested {
    grid-column: 1/-1;
    display: grid;
}

/* misaligned grid */
.ex4 .normal-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 10px;
}

/* aligned grid */
.ex4 .subgrid {
    grid-template-columns: subgrid;
    grid-column: 1/-1;
}

/* example adapted from https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Grids */
